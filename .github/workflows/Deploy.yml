name: CI / Docker publish / Render+Fly deploy

on:
    push:
        branches: [main, dev, feature/**, bugfix/**, hotfix/**]
    pull_request:
        branches: [main, dev]
    workflow_dispatch:

concurrency:
    group: ${{ github.workflow }}-${{ github.ref }}
    cancel-in-progress: true

env:
  NODE_VERSION: '20'
  IMAGE_NAME: kerverus/sc2cr

jobs:
    checks:
        name: Verify (typecheck • lint • tests)
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4
            - uses: actions/setup-node@v4
              with:
                  node-version: ${{ env.NODE_VERSION }}
                  cache: 'npm'
            - run: npm ci
            - run: npm run typecheck || true
            - run: npm run lint || true
            - run: npm run test -- --coverage || true

    docker_publish:
        name: Build & Push API image
        needs: checks
        runs-on: ubuntu-latest
        outputs:
            tag: ${{ steps.meta.outputs.tag }}
        steps:
            - uses: actions/checkout@v4

            - name: Decide tag
              id: meta
              run: |
                  if [ "${{ github.event_name }}" = "pull_request" ]; then
                    echo "tag=pr-${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT
                  elif [ "${{ github.ref }}" = "refs/heads/main" ]; then
                    echo "tag=latest" >> $GITHUB_OUTPUT
                  elif [ "${{ github.ref }}" = "refs/heads/dev" ]; then
                    echo "tag=dev" >> $GITHUB_OUTPUT
                  else
                    BRANCH="${GITHUB_REF_NAME//\//-}"
                    echo "tag=${BRANCH}" >> $GITHUB_OUTPUT
                  fi

            - uses: docker/setup-qemu-action@v3
            - uses: docker/setup-buildx-action@v3

            # Log in to Docker Hub
            - uses: docker/login-action@v3
              with:
                  username: ${{ secrets.DOCKER_HUB_USERNAME }}
                  password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

            # Log in to Fly.io registry
            - uses: superfly/flyctl-actions/setup-flyctl@v1
            - name: Auth Docker with Fly.io
              run: flyctl auth docker
              env:
                  FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

            - name: Cache Docker layers
              uses: actions/cache@v4
              with:
                  path: /tmp/.buildx-cache
                  key: ${{ runner.os }}-buildx-${{ github.sha }}
                  restore-keys: |
                      ${{ runner.os }}-buildx-

            - name: Build & Push to Docker Hub + Fly.io
              id: buildpush
              uses: docker/build-push-action@v6
              with:
                  context: .
                  push: true
                  tags: |
                      ${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.tag }}
                      ${{ env.IMAGE_NAME }}:${{ github.sha }}
                      registry.fly.io/${{ secrets.FLY_APP_NAME_DEV }}:${{ steps.meta.outputs.tag }}
                  cache-from: type=local,src=/tmp/.buildx-cache
                  cache-to: type=local,dest=/tmp/.buildx-cache,mode=max

            - name: Verify image (dev tag)
              if: github.ref == 'refs/heads/dev'
              run: |
                  docker buildx imagetools inspect "${{ env.IMAGE_NAME }}:dev"

    deploy_prod_render:
        name: Deploy PRODUCTION (Render)
        needs: docker_publish
        runs-on: ubuntu-latest
        if: github.ref == 'refs/heads/main'
        steps:
            - name: Deploy to Render
              env:
                  deploy_url: ${{ secrets.RENDER_DEPLOY_HOOK_URL }}
              run: curl -fsSL "$deploy_url"

    deploy_dev_flyio:
        name: Deploy DEV (Fly.io)
        needs: docker_publish
        runs-on: ubuntu-latest
        if: github.ref == 'refs/heads/dev'
        steps:
            - name: Checkout
              uses: actions/checkout@v4
            - name: Setup flyctl
              uses: superfly/flyctl-actions/setup-flyctl@v1
            - name: Deploy image to Fly.io (dev tag)
              env:
                  FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
              run: |
                  flyctl deploy --config fly.toml \
                    --remote-only \
                    --image "${{ env.IMAGE_NAME }}:dev" \
                    --strategy immediate \
                    --wait-timeout 600
              env:
                  FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}